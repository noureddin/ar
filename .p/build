#!/usr/bin/env perl
# vim: set fdm=marker:
use v5.14; use warnings; use autodie; use utf8;
use open qw[ :encoding(UTF-8) :std ];

# definitions {{{

# GENERAL

use File::stat;

# for generating the date for the Atom feed
use List::Util qw[ max maxstr ];

# install markdown-it-py: https://github.com/executablebooks/markdown-it-py
# install exiv2

# for hashing static files to cache-bust them on change
use Digest::file qw[ digest_file_base64 ];
sub hash(_) { digest_file_base64(shift, 'SHA-1') =~ tr[+/][-_]r }

sub err { warn "\e[1m\e[91m" . (join '', @_) . "\e[m\n" }

sub ichomp(_) { my $x = $_[0]; chomp $x; return $x }  # in-place chomp
sub slurp(_) { local $/; open my $f, '<', $_[0]; return scalar <$f> }
sub slurp_lines(_)     { open my $f, '<', $_[0]; map { ichomp } <$f> }
sub firstline(_) { open my $f, '<', $_[0]; ichomp scalar <$f> }

# IMAGES

# takes filename (must not contain an apostrophe); returns ($width, $height).
sub true_imgsize(_) { my ($file) = @_;
  if (!-f $file || $file =~ /'/) { err "inappropiate filename for imgsize: «$file»"; return }
  return map { ichomp } `.p/imgsize '$file'`;
}

# i/o is the same as true_imgsize; used for all the images in an article.
# restricted to the maximum width defined by the CSS (35em, at 20px).
# this needs to be re-iterated for the Atom feed.
sub imgsize(_) { my ($file) = @_;
  my ($w, $h) = true_imgsize $file;
  return unless defined $w;
  if ($w > 700) {
    $h *= 700 / $w;
    $w = 700;
  }
  return $w, $h;
}

sub picture_of { my ($base) = @_;
  my $html = '<center><picture>';
  # optional: avif and/or webp
  if (-e "$base.avif") {
    my ($w, $h) = imgsize "$base.avif";
    $html .= qq[<source type="image/avif" srcset="$base.avif" width="$w" height="$h">];
  }
  if (-e "$base.webp") {
    my ($w, $h) = imgsize "$base.webp";
    $html .= qq[<source type="image/webp" srcset="$base.webp" width="$w" height="$h">];
  }
  # required: either png or jpg
  if (-e "$base.png") {
    my ($w, $h) = imgsize "$base.png";
    $html .= qq[<img src="$base.png" width="$w" height="$h">];
  }
  elsif (-e "$base.jpg") {
    my ($w, $h) = imgsize "$base.jpg";
    $html .= qq[<img src="$base.jpg" width="$w" height="$h">];
  }
  else {
    err "couldn't find '$base.png' or '$base.jpg'";
  }
  return "$html</picture></center>";
}

# TAGS

sub get_tags_for { my ($slug) = @_;
  return '' unless -f "$slug/.tags";
  return join "&emsp;", map {
    sprintf '<a href="{{root}}#tag=%s">#%s</a>',
      (s/ /_/gr) x 2
  } slurp_lines "$slug/.tags";
}

# TIME

my @_days = qw[ الثاني الثالث الرابع الخامس السادس السابع الثامن التاسع ];
my @ar_days = (0,
  'الأول', @_days, 'العاشر',
  (map { "$_ عشر" } 'الحادي', @_days), 'العشرين',
  (map { "$_ والعشرين" } 'الحادي', @_days), 'الثلاثين',
  'الحادي والثلاثين',
);
my @ar_months = (0,
  'يناير / كانون الثاني',
  'فبراير / شباط',
  'مارس / أذار',
  'ابريل / نيسان',
  'مايو / أيار',
  'يونيو / حزيران',
  'يوليو / تموز',
  'أغسطس / آب',
  'سبتمبر / أيلول',
  'أكتوبر / تشرين الأول',
  'نوفمبر / تشرين الثاني',
  'ديسمبر / كانون الأول',
);

sub arabize_numbers { ($_[0] // $_) =~ tr[0123456789][٠١٢٣٤٥٦٧٨٩]r }
sub arabize_date_short { arabize_numbers($_[0] // $_) =~ s,-,/,gr }
sub arabize_date_long {
  my ($y, $m, $d) = split '-', ($_[0] // $_);
  return join ' ',
    'اليوم',
    $ar_days[$d],
    'من',
    $ar_months[$m],
    arabize_numbers($y),
}

sub make_time { my ($yyyy_mm_dd) = @_;
  return sprintf '<time datetime="%s" title="%s">%s</time>',
    $yyyy_mm_dd,
    arabize_date_long($yyyy_mm_dd),
    arabize_date_short($yyyy_mm_dd),
}

sub __parse_time_in { my ($slug, $upd_not_pub) = @_;
  my $path = $slug . '/' . ($upd_not_pub ? '.upd' : '.pub');
  if ($upd_not_pub && !-f $path) { return }
  # file is checked for upd only b/c pub is already checked
  my $name = $upd_not_pub ? 'updating' : 'publishing';
  my $verb = $upd_not_pub ? 'عُدِّل' : 'نُشر';
  my $date = firstline $path;
  if ($date =~ m|^([0-9]{4}-[0-9]{2}-[0-9]{2})([.][0-9]+)?$|) {
    return $&, sprintf '<span>%s&nbsp;%s</span>%s', $verb, make_time($1), $2 // '';
  }
  else {
    err "article '$slug' has invalid $name time: «$date»";
    return;
  }
}

sub get_time_for { my ($slug) = @_;
  # time is defined in $slug/.pub (publishing) and $slug/.upd (last update, if any),
  # in YYYY-mm-dd formate (UTC day),
  # optionally ending with '.1' (and so on) for subsequent posts in the same day.
  # this returns an object of three:
  #   str => the human readable html localized time
  #   pub => the exact content of slug/.pub if valid otherwise undef
  #   upd => the exact content of slug/.upd if valid otherwise undef
  #
  if (!-f "$slug/.pub") {
    err "article '$slug' has no publishing time";
    return;
  }
  my ($pub, $pub_str) = __parse_time_in $slug;
  my ($upd, $upd_str) = __parse_time_in $slug, 1;
  return
    str => (join ' ', grep { defined } $upd_str, $pub_str) =~ s|[.][0-9]+||gr,
    pub => $pub,
    upd => $upd,
}

# }}}

my $stylehash = hash 'etc/style.min.css';
my $logo = slurp 'etc/logo.svg';
my $feedicon = slurp 'etc/feed-icon.svg';
# based on https://en.wikipedia.org/wiki/File:Feed-icon.svg
# flipped & made monochrome with Inkscape,
# then compressed with vecta.io/nano
# then modified manually a bit.

my @posts;

while (glob '*/') {
  my $slug = $_ =~ s,/$,,r;
  next if $slug eq 'etc' || $slug eq 'notes';
  if ($slug =~ /'/) { err "slug «$slug» has an apostrophe"; next }  # for parse
  if (!-e "$slug/.src") { err "article '$slug' has no src"; next }
  if (!-e "$slug/.head") { err "article '$slug' has no title"; next }
  my $title = (firstline "$slug/.head")
    =~ s|\[\[ (.*?) \]\]|<span dir="ltr" class="en">$1</span>|grx
    ;
  my $page_title = ($title =~ s,<[^<>]*>,,gr) . " — كتابات وترجمات نور الدين";
  my $desc = firstline "$slug/.desc";
  my $tags = get_tags_for $slug;
  my %time = get_time_for $slug;
  next unless $time{str};
  my $img_base = -f "$slug/.img" ? (firstline "$slug/.img") : undef;
  my $img = -f "$slug/$img_base.png" ? "$img_base.png"
          : -f "$slug/$img_base.jpg" ? "$img_base.jpg"
          : undef;
  if ($img && $img =~ /'/) { err "img «$img» in slug '$slug' has an apostrophe"; next }  # for imgsize
  my ($imgw, $imgh) = true_imgsize "$slug/$img";
  $img = '' unless defined $imgw;
  my $pic = -f "$slug/.img" ? picture_of($slug .'/'. firstline "$slug/.img") : undef;
  my $h = 0;  # for making anchors for h2 & h3 w/o ids
  my $content = (scalar `.p/parse '$slug/.src'`)
    =~ s|\{\{ ([0-9]{4}-[0-9]{2}-[0-9]{2}) \}\}|make_time($1)|grxe
    =~ s|\+\+|&nbsp;|gr
    =~ s|<h([23]) id="([^"]+)">(.*?)</h\1>|<h$1 id="$2"><a class="hh" href="#$2">#</a> $3<span class="hs">&nbsp;</span></h$1>|gr
    =~ s|<h([23])>(.*?)</h\1>|<h$1 id="h$h"><a class="hh" href="#h@{[ ++$h ]}">#</a> $2<span class="hs">&nbsp;</span></h$1>|gr
    =~ s|\[\[ (.*?) \]\]|<span class="en">$1</span>|grx
    =~ s{<img(\b[^<>]+\bsrc)="([^<>"]+)"}{
      my ($pre, $url) = ($1, $2);
      my ($w, $h) = imgsize "$slug/$url";
      my $dim = defined $w ? qq[width="$w" height="$h"] : '';
      qq[<img $dim$pre="$url"]
    }gre
    =~ s|<p>(<img[^<>]*>)</p>|<center>$1</center>|gr
    =~ s|<p>(!!)(\S+)</p>|picture_of("$slug/$2") =~ s,"$slug/,",gr|gre
    =~ s|(<code>.*?</code>)|<nobr>$1</nobr>|gr  # otherwise "`code`;" could have a line break after `code`; see https://stackoverflow.com/a/40827310
    =~ s/\s+\Z//gr
    ;
  open my $f, '>', "$slug/index.html";
  print { $f } slurp('.t/header.html')
    =~ s|\Q{{pagetitle}}\E|$page_title|gr
    =~ s|\Q{{title}}\E|$title|gr
    =~ s|\Q{{description}}\E|$desc|gr
    =~ s|\Q{{type}}\E|article|gr
    =~ s|\Q{{pubtime}}\E|(ichomp slurp "$slug/.pub") =~ s,\.[0-9]+,,r|gre
    =~ s|\Q{{tags}}\E|$tags|gre
    =~ s|\Q{{time}}\E|$time{str}|gre
    =~ s|(.*)\Q{{imgurl}}\E(.*\n)|   $img ? "$1$img$2" : ''|gre
    =~ s|(.*)\Q{{imgwidth}}\E(.*\n)| $img ? "$1$imgw$2" : ''|gre
    =~ s|(.*)\Q{{imgheight}}\E(.*\n)|$img ? "$1$imgh$2" : ''|gre
    =~ s|\Q{{logo}}\E|$logo|gr
    =~ s|\Q{{root}}\E|../|gr
    =~ s|\Q{{stylehash}}\E|$stylehash|gr
    =~ s|\Q{{homelinkattrs}}\E|href="../"|gr
    =~ s|\Z|\n<article>|r
    ;
  print { $f } $content;
  print { $f } slurp('.t/footer.html')
    =~ s|\Q{{homelinkattrs}}\E|href="../"|gr
    =~ s|\Q{{homescripttag}}\E\n||gr  # script is used only on the home page for filtering by tags
    =~ s|\Q{{feedicon}}\E|$feedicon|gr
    =~ s|\Q{{root}}\E|../|gr
    =~ s|\A|\n</article>\n|r
    ;
  close $f;
  push @posts, {
    slug => $slug,
    title => $title,
    time_str => $time{str},
    time_pub => $time{pub},
    time_upd => $time{upd},
    tags => $tags,
    description => $desc,
    picture => $pic,
    content => $content,
  };
  say "wrote '$slug'";
}

@posts = sort { $b->{time_pub} cmp $a->{time_pub} } @posts;  # newest first by publishing date

# home page

open my $f, '>', 'index.html';
print { $f } slurp('.t/header.html')
  =~ s|\Q{{pagetitle}}\E|كتابات وترجمات — نور الدين|gr
  =~ s|\Q{{title}}\E|كتابات وترجمات — نور الدين|gr
  =~ s|.*\Q{{description}}\E.*\n||gr  # TODO: add a description
  =~ s|\Q{{type}}\E|website|gr
  =~ s|.*\Q{{pubtime}}\E.*\n||gr
  =~ s|(.*)\Q{{imgurl}}\E(.*\n)||gr
  =~ s|(.*)\Q{{imgwidth}}\E(.*\n)||gr
  =~ s|(.*)\Q{{imgheight}}\E(.*\n)||gr
  =~ s|\Q{{logo}}\E|$logo|gr
  =~ s|\Q{{root}}\E||gr
  =~ s|\Q{{stylehash}}\E|$stylehash|gr
  =~ s|\Q{{homelinkattrs}}\E|aria-current="page" href=""|gr
  =~ s|^<div class="meta".*\n||mgr
  =~ s|\Z|\n<main>|r
  ;
print { $f } join "\n", map {
  my $tags = $_->{tags} =~ s,\Q{{root}}\E,,gr;
  my $time = $_->{time_str};
  my $img = $_->{picture} // '';
  qq[<section class="card"><!--
   --><h2><a href="$_->{slug}">$img$_->{title}</a></h2><!--
   --><p>$_->{description}</p><!--
   --><div class="meta"><!--
     --><div class="tags">$tags</div><!--
     --><div class="time">$time</div><!--
   --></div><!--
  --></section>] =~ s/\s+/ /gr =~ s/<!--.*?-->//gr =~ s/\s*\Z//gr
  } @posts;
print { $f } slurp('.t/footer.html')
  =~ s|\Q{{homelinkattrs}}\E|aria-current="page" href=""|gr
  =~ s|\Q{{homescripttag}}\E|<script>@{[slurp 'etc/homescript.min.js']}</script>|gr
  =~ s|\Q{{feedicon}}\E|$feedicon|gr
  =~ s|\Q{{root}}\E||gr
  =~ s|\A|\n</main>\n|r
  ;
close $f;

# atom feed

sub updated_from_time {
  my ($date, $time) = $_[0] =~ /^([^.]*)(?:[.]([0-9]+))?$/;  # ASSUMPTION: no more than 6 pub/upd per day.
  return sprintf "%sT%02d:00:00Z", $date, 4*($time // 0);
}

my $updated = updated_from_time maxstr map { $_->{time_upd} // '', $_->{time_pub} } @posts;

open my $m, '>', 'feed.atom.xml';
print { $m } <<"END_OF_TEXT" =~ s/>\s+</></gr;
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ar" dir="rtl">
  <title>كتابات وترجمات — نور الدين</title>
  <link rel="alternate" type="text/html" href="https://www.noureddin.dev/w/" />
  <link rel="self" type="application/atom+xml" href="https://www.noureddin.dev/w/feed.atom.xml" />
  <icon>https://www.noureddin.dev/w/etc/favicon-72x72.png</icon>
  <logo>https://www.noureddin.dev/etc/cover-og.png</logo>
  <updated>$updated</updated>
  <id>tag:noureddin.dev,2023:/w/feed.atom.xml</id>
  <author>
    <name>نور الدين | Noureddin</name>
    <uri>https://www.noureddin.dev/</uri>
  </author>
END_OF_TEXT

# https://www.ietf.org/archive/id/draft-snell-atompub-bidi-05.html
# dir="rtl" is not widely supported, even https://validator.w3.org/feed/ chokes on it,
# so Unicode RTL embedding is still needed.

use charnames ":full", ":alias" => {
  LTR => "LEFT-TO-RIGHT EMBEDDING",
  RTL => "RIGHT-TO-LEFT EMBEDDING",
  POP => "POP DIRECTIONAL FORMATTING",
};

# ASSUMPTION: if the arg contains RTL or LTR EMBED, it must be balanced with POP DIR.
sub RTL(_) { "\N{RTL}" . $_[0] . "\N{POP}" }

sub dehtml_ltr(_) { $_[0] =~ s/<span[^<>]*>/\N{LTR}/gr =~ s/<\/span>/\N{POP}/gr }

sub format_text(_) {
  # warn if RTL+LTR != POP (see RTL()'s ASSUMPTION above)
  warn "unbalanced directional embedding (LTR EMBED, RTL EMBED, and POP DIR) in:\n  $_[0]\n"
    unless (length $_[0] =~ s/[^\N{RTL}]+//gr)  # count RTL chars in $_[0]
         + (length $_[0] =~ s/[^\N{LTR}]+//gr)
        == (length $_[0] =~ s/[^\N{POP}]+//gr)
        ;
  # call dehtml_ltr to fix [[-]], then call RTL to fix the overall direction
  return RTL(dehtml_ltr($_[0]));
}

for my $post (@posts) {
  my $updated = updated_from_time($post->{time_upd} // $post->{time_pub});
  my $date = $post->{time_pub} =~ s/[.].*//r;
  my $published_tag = !defined $post->{time_upd} ? '' :
    ('<published>'.updated_from_time($post->{time_pub}).'</published>');
  my $slug = $post->{slug};
  my $base = "https://www.noureddin.dev/w/$slug/";
  my $content = $post->{content}
    =~ s|<div class="note">(.*?)</div>|<blockquote>$1</blockquote>|grs
    =~ s|( src(?:set)?=")|$1$base|grs
    ;
  print { $m }
    '<entry>',
    '<title>', format_text($post->{title}), '</title>',
    '<link rel="alternate" type="text/html" href="', $slug, '" />',
    '<updated>', $updated, '</updated>',
    $published_tag,
    '<id>tag:noureddin.dev,', $date, ':/w/', $slug, '</id>',
    # '<summary>', format_text($post->{description}), '</summary>',
    '<content type="html" xml:base="', $base, '"><![CDATA[<div lang="ar" dir="rtl">', $content, '</div>]]></content>',
    '</entry>', "\n";
}

print { $m } '</feed>';
close $m;

