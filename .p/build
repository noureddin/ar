#!/usr/bin/env perl
# vim: set fdm=marker:
use v5.14; use warnings; use autodie; use utf8;
use open qw[ :encoding(UTF-8) :std ];
use List::Util qw[ max maxstr ];

# definitions {{{

# GENERAL

use File::stat;

# install markdown-it-py: https://github.com/executablebooks/markdown-it-py
# install exiv2

# for hashing static files to cache-bust them on change
use Digest::file qw[ digest_file_base64 ];
sub hash(_) { digest_file_base64(shift, 'SHA-1') =~ tr[+/][-_]r }

sub err { warn "\e[1m\e[91m" . (join '', @_) . "\e[m\n" }

sub ichomp(_) { my $x = $_[0]; chomp $x; return $x }  # in-place chomp
sub slurp(_) { local $/; open my $f, '<', $_[0]; return scalar <$f> }
sub slurp_lines(_)     { open my $f, '<', $_[0]; map { ichomp } <$f> }
sub firstline(_) { open my $f, '<', $_[0]; ichomp scalar <$f> }

# IMAGES

sub picture_of { my ($base) = @_;
  my $html = '<center><picture>';
  # optional: avif and/or webp
  if (-e "$base.avif") {
    my ($w, $h) = map { ichomp } `.p/imgsize '$base.avif'`;
    $html .= qq[<source type="image/avif" srcset="$base.avif" width="$w" height="$h">];
  }
  if (-e "$base.webp") {
    my ($w, $h) = map { ichomp } `.p/imgsize '$base.webp'`;
    $html .= qq[<source type="image/webp" srcset="$base.webp" width="$w" height="$h">];
  }
  # required: either png or jpg
  if (-e "$base.png") {
    my ($w, $h) = map { ichomp } `.p/imgsize '$base.png'`;
    $html .= qq[<img src="$base.png" width="$w" height="$h">];
  }
  elsif (-e "$base.jpg") {
    my ($w, $h) = map { ichomp } `.p/imgsize '$base.jpg'`;
    $html .= qq[<img src="$base.jpg" width="$w" height="$h">];
  }
  else {
    err "couldn't find '$base.png' or '$base.jpg'";
  }
  return "$html</picture></center>";
}

# TAGS

sub get_tags_for { my ($slug) = @_;
  return '' unless -f "$slug/.tags";
  my @tags_en = 
  return join "&emsp;", map {
    sprintf '<a href="{{root}}#tag=%s">#%s</a>',
      (s/ /_/gr) x 2
  } slurp_lines "$slug/.tags";
}

# TIME

my @_days = qw[ الثاني الثالث الرابع الخامس السادس السابع الثامن التاسع ];
my @ar_days = (0,
  'الأول', @_days, 'العاشر',
  (map { "$_ عشر" } 'الحادي', @_days), 'العشرين',
  (map { "$_ والعشرين" } 'الحادي', @_days), 'الثلاثين',
  'الحادي والثلاثين',
);
my @ar_months = (0,
  'يناير / كانون الثاني',
  'فبراير / شباط',
  'مارس / أذار',
  'ابريل / نيسان',
  'مايو / أيار',
  'يونيو / حزيران',
  'يوليو / تموز',
  'أغسطس / آب',
  'سبتمبر / أيلول',
  'أكتوبر / تشرين الأول',
  'نوفمبر / تشرين الثاني',
  'ديسمبر / كانون الأول',
);

sub arabize_numbers { ($_[0] // $_) =~ tr[0123456789][٠١٢٣٤٥٦٧٨٩]r }
sub arabize_date_short { arabize_numbers($_[0] // $_) =~ s,-,/,gr }
sub arabize_date_long {
  my ($y, $m, $d) = split '-', ($_[0] // $_);
  return join ' ',
    'اليوم',
    $ar_days[$d],
    'من',
    $ar_months[$m],
    arabize_numbers($y),
}

sub make_time { my ($yyyy_mm_dd) = @_;
  return sprintf '<time datetime="%s" title="%s">%s</time>',
    $yyyy_mm_dd,
    arabize_date_long($yyyy_mm_dd),
    arabize_date_short($yyyy_mm_dd),
}

sub __parse_time_in { my ($slug, $upd_not_pub) = @_;
  my $path = $slug . '/' . ($upd_not_pub ? '.upd' : '.pub');
  my $name = $upd_not_pub ? 'updating' : 'publishing';
  my $verb = $upd_not_pub ? 'عُدِّل' : 'نُشر';
  my $date = firstline $path;
  if ($date =~ m|^([0-9]{4}-[0-9]{2}-[0-9]{2})([.][0-9]+)?$|) {
    return sprintf '<span>%s&nbsp;%s</span>%s', $verb, make_time($1), $2 // '';
  }
  else {
    err "article '$slug' has invalid $name time: «$date»";
    return;
  }
}

sub get_time_for { my ($slug) = @_;
  # time is defined in $slug/.pub (publishing) and $slug/.upd (last update, if any),
  # in YYYY-mm-dd formate (UTC day),
  # optionally ending with '.1' (and so on) for subsequent posts in the same day.
  if (!-f "$slug/.pub") {
    err "article '$slug' has no publishing time";
    return;
  }
  my $pub = __parse_time_in $slug;
  return unless $pub;
  return $pub unless -f "$slug/.upd";
  my $upd = __parse_time_in $slug, 1;
  return $pub . ' ' . $upd;
}

# }}}

my $stylehash = hash 'etc/style.min.css';
my $logo = slurp 'etc/logo.svg';

my @posts;

while (glob '*/') {
  my $slug = $_ =~ s,/$,,r;
  next if $slug eq 'etc' || $slug eq 'notes';
  if ($slug =~ /'/) { err "slug «$slug» has an apostrophe"; next }  # for parse
  if (!-e "$slug/.src") { err "article '$slug' has no src"; next }
  if (!-e "$slug/.head") { err "article '$slug' has no title"; next }
  my $title = (firstline "$slug/.head")
    =~ s|\[\[ (.*?) \]\]|<span dir="ltr" class="en">$1</span>|grx
    ;
  my $page_title = ($title =~ s,<[^<>]*>,,gr) . " — كتابات وترجمات نور الدين";
  my $desc = firstline "$slug/.desc";
  my $tags = get_tags_for $slug;
  my $time = get_time_for $slug;
  next unless $time;
  my $img = -f "$slug/.img" ? (firstline "$slug/.img").'.png' : undef;
  if ($img && $img =~ /'/) { err "img «$img» in slug '$slug' has an apostrope"; next }  # for imgsize
  my ($imgw, $imgh);
  if ($img && -f "$slug/$img") {
    ($imgw, $imgh) = map { ichomp } `.p/imgsize '$slug/$img'`;
  }
  else {
    $img = '';
  }
  my $pic = -f "$slug/.img" ? picture_of($slug .'/'. firstline "$slug/.img") : undef;
  open my $f, '>', "$slug/index.html";
  print { $f } slurp('.t/header.html')
    =~ s|\Q{{pagetitle}}\E|$page_title|gr
    =~ s|\Q{{title}}\E|$title|gr
    =~ s|\Q{{description}}\E|$desc|gr
    =~ s|\Q{{type}}\E|article|gr
    =~ s|\Q{{pubtime}}\E|(ichomp slurp "$slug/.pub") =~ s,\.[0-9]+,,r|gre
    =~ s|\Q{{tags}}\E|$tags =~ s,\Q{{root}}\E,../,gr|gre
    =~ s|\Q{{time}}\E|$time =~ s,[.][0-9]+,,r|gre
    =~ s|(.*)\Q{{imgurl}}\E(.*\n)|   $img ? "$1$img$2" : ''|gre
    =~ s|(.*)\Q{{imgwidth}}\E(.*\n)| $img ? "$1$imgw$2" : ''|gre
    =~ s|(.*)\Q{{imgheight}}\E(.*\n)|$img ? "$1$imgh$2" : ''|gre
    =~ s|\Q{{logo}}\E|$logo|gr
    =~ s|\Q{{root}}\E|../|gr
    =~ s|\Q{{stylehash}}\E|$stylehash|gr
    =~ s|\Q{{homelinkattrs}}\E|href="../"|gr
    =~ s|\Z|\n<article>|r
    ;
  my $h = 0;
  print { $f } (scalar `.p/parse '$slug/.src'`)
    =~ s|\{\{ ([0-9]{4}-[0-9]{2}-[0-9]{2}) \}\}|make_time($1)|grxe
    =~ s|\+\+|&nbsp;|gr
    =~ s|<h([23]) id="([^"]+)">(.*?)</h\1>|<h$1 id="$2"><a class="hh" href="#$2">#</a>$3<span class="hs">&nbsp;</span></h$1>|gr
    =~ s|<h([23])>(.*?)</h\1>|<h$1 id="h$h"><a class="hh" href="#h@{[ ++$h ]}">#</a>$2<span class="hs">&nbsp;</span></h$1>|gr
    =~ s|\[\[ (.*?) \]\]|<span class="en">$1</span>|grx
    =~ s{<img(\b[^<>]+\bsrc)="([^<>"]+)"}{
      my ($prefix, $imgurl) = ($1, $2);
      my ($w, $h) = map { ichomp } `.p/imgsize '$slug/$imgurl'`;
      qq[<img width="$w" height="$h"$prefix="$imgurl"]
    }gre
    =~ s|<p>(<img[^<>]*>)</p>|<center>$1</center>|gr
    =~ s|<p>(!!)(\S+)</p>|picture_of("$slug/$2") =~ s,"$slug/,",gr|gre
    =~ s|(<code>.*?</code>)|<nobr>$1</nobr>|gr  # otherwise "`code`;" could have a line break after `code`; see https://stackoverflow.com/a/40827310
    =~ s/\s+\Z//gr
    ;
  print { $f } slurp('.t/footer.html')
    =~ s|\Q{{homelinkattrs}}\E|href="../"|gr
    =~ s|\Q{{homescripttag}}\E\n||gr  # script is used only on the home page for filtering by tags
    =~ s|\A|\n</article>\n|r
    ;
  close $f;
  push @posts, { slug => $slug, title => $title, time => $time, tags => $tags, description => $desc, picture => $pic };
  say "wrote '$slug'";
}

# home page

open my $f, '>', 'index.html';
print { $f } slurp('.t/header.html')
  =~ s|\Q{{pagetitle}}\E|كتابات وترجمات — نور الدين|gr
  =~ s|\Q{{title}}\E|كتابات وترجمات — نور الدين|gr
  =~ s|.*\Q{{description}}\E.*\n||gr  # TODO: add a description
  =~ s|\Q{{type}}\E|website|gr
  =~ s|.*\Q{{pubtime}}\E.*\n||gr
  =~ s|\Q{{logo}}\E|$logo|gr
  =~ s|\Q{{root}}\E||gr
  =~ s|\Q{{stylehash}}\E|$stylehash|gr
  =~ s|\Q{{homelinkattrs}}\E|aria-current="page" href=""|gr
  =~ s|^<div class="meta".*\n||mgr
  =~ s|\Z|\n<main>|r
  ;
print { $f } join "\n", map {
  my $tags = $_->{tags} =~ s,\Q{{root}}\E,,gr;
  my $time = $_->{time} =~ s,[.][0-9]+,,r;
  my $img = $_->{picture} // '';
  qq[<section class="card"><!--
   --><h2><a href="$_->{slug}">$img$_->{title}</a></h2><!--
   --><p>$_->{description}</p><!--
   --><div class="meta"><!--
     --><div class="tags">$tags</div><!--
     --><div class="time">$time</div><!--
   --></div><!--
  --></section>] =~ s/\s+/ /gr =~ s/<!--.*?-->//gr =~ s/\s*\Z//gr
  } sort { $b->{time} cmp $a->{time} } @posts;
print { $f } slurp('.t/footer.html')
  =~ s|\Q{{homelinkattrs}}\E|aria-current="page" href=""|gr
  =~ s|\Q{{homescripttag}}\E|<script>@{[slurp 'etc/homescript.min.js']}</script>|gr
  =~ s|\A|\n</main>\n|r
  ;
close $f;

